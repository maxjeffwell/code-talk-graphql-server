# source: http://localhost:8000/graphql
# timestamp: Tue Mar 12 2019 11:04:22 GMT-0400 (Eastern Daylight Time)

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Code {
  body: String
}

input CodeInput {
  body: String
}

scalar DateTime

type Message {
  id: ID!
  text: String
  createdAt: DateTime!
  user: User!
  room: Room!
}

type MessageConnection {
  edges: [Message!]!
  pageInfo: PageInfo!
}

type MessageCreated {
  message: Message!
}

type Mutation {
  _: Boolean
  signUp(username: String!, email: String!, password: String!): Token!
  signIn(login: String!, password: String!): Token!
  updateUser(username: String!): User!
  deleteUser(id: ID!): Boolean!
  createMessage(text: String!, roomId: ID!): Message!
  deleteMessage(id: ID!): Boolean!
  createRoom(title: String!): Room!
  deleteRoom(id: ID!): Boolean!
  typeCode(code: CodeInput!): Code!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

type Query {
  _: Boolean
  users: [User!]
  user(id: ID!): User
  me: User
  messages(cursor: String, limit: Int!, roomId: ID!): MessageConnection!
  message(id: ID!): Message!
  rooms(cursor: String, limit: Int): RoomConnection!
  room(id: ID!): Room!
  readCode: Code!
}

type Room {
  id: ID!
  title: String!
  createdAt: DateTime!
  users: [User!]
  messages: [Message!]
}

type RoomConnection {
  edges: [Room!]!
  pageInfo: PageInfo!
}

type RoomCreated {
  room: Room!
}

type Subscription {
  _: Boolean
  messageCreated(roomId: ID!): MessageCreated!
  roomCreated: RoomCreated
  typingCode: Code!
}

type Token {
  token: String!
}

scalar Upload

type User {
  id: ID!
  username: String!
  email: String!
  role: String
  messages: [Message!]
}
